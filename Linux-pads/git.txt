git config --global user.name "Your Name"
git config --global user.email "your@example.com"

git init
git remote add origin https://github.com/yourusername/your-repo-name.git
git add .
git commit -m "Initial commit"
git push -u origin master
--------------------

Q. How to create a empty git repo in local ?
# git init

Working Area          Staging Area       Local Repo
------------           ------------       ------------
deploye.sh              deploye.sh 
service.json            deploye.sh        deploye.sh 
             ----------->          ------>  
# git status  # git add .           #git commit -m "first commit"
              # git add *
              # git add file1 file3

# files which are in working area are called untracked files
# files which are in staging area are called tarcked files


commonds
# git init  ----> .git dir will create (Head/config/hooks/objects/branchs) .
# git status ----> gives the status of file in which are is present
# git commit - m "fist commint"
# git commit - m "fist commint" <file1> <file2>

# git remote add <alisaName> <RepoUrl>
# git remote add df https://github.com/deflow/web-app.git 
# git remote -v -----> it will shows mapped repo
# git push <alisaNamw> <BranchName>
# git push <alisaNamw> <BranchName>
# git push df master
# git log   ---> How to see all commits
* commit ID/Author/Date & commit msg will able to see
# git log 2 ---> How to see only lastet commit ids
# git show <commitID> ---> How to see how many files are commited 
# git show --pretty="" --name-only <commitID> ---To display only files
# git reset  ---> How to revert files from staging Area to Working Area
# git reset <fileName> ---> How to revert files from staging Area to Working Area
# git revert <commitID> --- It will deleted new updated contains and newly add files & It will clean Local Repo
# .gitignore --> To ignore the files which are not requeried
-----------------------------------------------------------
# -----------# Branchs--------
# git branch                ----> how to see what branch ?
# git branch <BranchName>   ----> TO create Branch
# git checkout <BranchName> ----> To change the Branch Name
# git checkout -b <BranchName>--> It is will create and change the branch.
# git diff <BranchName>     ----> It will show the differenc b/w the head branch and selected branch
# git merge <BranchName>    ----> The selected Branch will be merged with head Branch.
# git push df --all         ----> Push all branchs
# git push df branch1 branch2 --> push perticular two branchs
# git branch    ----> Local repo Branchs
# git branch -r ----> Remote Branchs 
# git branch -r -a----> Remote Branchs and local repo
# git branch -a ----> all
# git branch -d <branchName> ----> To delete The branchs in local repo
-------------------------------------------------------
Tags

# what is the difference between branch and Tag ?
# Branch                      # Tag
* Branch is mutable         * Tag is an immutable
* on going Developments     * Production Deployment
                            * master branch
* git branch bn             * git tag tn
* git branch                * git tag
* git push an bn            * git push an tag tn
* git push an --all         * git push an --tag 

# git tag <tagName>         ---> How to create tag
           (wallmartv1.0.0)
# git push an tag <tagname> ---> To push tag
# git tag -d <tagName>      ---> to delete the tag
# git tag -l -n3            ---> To see tag (3 tags )
# git tag --list            ---> To list the tags 
-----------------------------------------------------------
# Git stash  
* if we want to switch the branchs , without commiting the current branch git stash is used .
* when git stash is used ,it will create a temparary backup of current working branch 
# git stash --list --> it will display ,how many backups 
eg: stat@{0}
    stat@{1}
    stat@{2}
    stat@{3}
# git stash apply ---> latest
# git stash apply stat@{2}
# git stash drop stat@{2} ----> To delete backup
# git stash pop           ----> (apply + drop)
-----------------------------------------------------------
# git cherry-pick
  ---------------
Branch
master
     |
     v development D<commitID1> D<commitID2> D<commitID3> D<commitID4>
# git merge development ----> All commits will merge will master branch
# git cherry-pick <commitID>
# git cherry-pick <commitID4>
-----------------------------------------------------------
# git clone <url>           ---> it will copy of existing git repo
# git pull <alisa> <branch> ---> (git fetch + git merge) --remote to working 
# git fetch <alisa> <branch>---> from remote to local 
-----------------------------------------------------------
# git merge development  -----> it will take all commits into one commit and it will megre that one commit  with Head branch.
# git rebase development -----> IT will take all commits and will meger all, as it is  commits to head branch.
---------------------------------------------------------
Branching Strategy
----------------- 
Prod_Retail
staging_retail
pilot_retail
-----------------------------------------------------------
# git commit — amend  --->To fix a broken commit
# To fix a broken commit in Git, We use the “git commit — amend” command, which helps us combine the staged changes with the previous commits instead of creating a fresh new commit.
